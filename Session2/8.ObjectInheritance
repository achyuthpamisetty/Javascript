//Object Inheritance
function Animal(name,age){    //created a constructor
    this.name = name
    this.age = age
}

Animal.prototype.eats = function(){             //constructor attached to the prototype
    console.log(this.name+' is eating')
}

//Create another constructor
function Dog(name,age,breed){
    this.name = name
    this.age = age
    this.breed = breed
    this.logBreed = function(){
        console.log(this.name+'is a'+this.breed)
    }
}

//name, age from Animal can inherit to the Dog, why we use again in the Dog?
//we can do as below

function Dog(name,age,breed){
    Animal.call(this,name,age)
    this.breed = breed
    this.logBreed = function(){
        console.log(this.name+'is a'+this.breed)
    }
}

var d1 = new Dog('d1',12,'bulldog')
d1
output: name:d1, age:12, breed:bulldog
its inheriting only the object method that attached to that particluar constructor function

d1.eats()
output: throws an error(its not inheriting the prototype)

//to rescue this
Dog.prototype = object.create(Animal.prototype)

var d2 = new Dog('d2',12,'bulldog')
d2
output: all details will be shown

d2.eats()
output: d2 is eating //((its inheriting the prototype))
